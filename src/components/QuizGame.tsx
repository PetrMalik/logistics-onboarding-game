import { useState, useEffect } from 'react'
import { useScore } from '../contexts/ScoreContext'
import { useQuest } from '../contexts/QuestContext'
import './QuizGame.css'

interface QuizGameProps {
  onClose: () => void
}

interface QuizQuestion {
  question: string
  options: string[]
  correctAnswer: number // index spr√°vn√© odpovƒõdi (0-2)
}

type GameStep = 'storytelling' | 'quiz' | 'result'

const QUIZ_QUESTIONS: QuizQuestion[] = [
  {
    question: 'Kde zaƒç√≠n√° cesta bal√≠ku?',
    options: ['U z√°kazn√≠ka', 'Na depu', 'Ve v√Ωdejn√≠m boxu'],
    correctAnswer: 1
  },
  {
    question: 'Co je parcel number?',
    options: ['Adresa p≈ô√≠jemce', 'Jedineƒçn√© ƒç√≠slo bal√≠ku', 'Jm√©no kur√Ωra'],
    correctAnswer: 1
  },
  {
    question: 'Co se dƒõje na v√Ωdejn√≠m m√≠stƒõ?',
    options: ['Bal√≠ky ƒçekaj√≠ na z√°kazn√≠ky', 'Bal√≠ky se vyr√°bƒõj√≠', 'Bal√≠ky mƒõn√≠ trasu'],
    correctAnswer: 0
  },
  {
    question: 'Jak si z√°kazn√≠k vyzvedne bal√≠k na boxu?',
    options: ['Pomoc√≠ k√≥du, kter√Ω otev≈ôe p≈ôihr√°dku', 'P≈ô√≠mou fyzickou ≈æ√°dost√≠ u pracovn√≠ka', 'Po≈°le e-mail pracovn√≠kovi depa'],
    correctAnswer: 0
  },
  {
    question: 'Co mus√≠ kur√Ωr udƒõlat na cestƒõ k z√°kazn√≠kovi?',
    options: ['Rozt≈ô√≠dit bal√≠ky do depa', 'Doruƒçit bal√≠ky podle pl√°novan√© trasy', 'Kontrolovat skladov√© z√°soby'],
    correctAnswer: 1
  }
]

const TIME_LIMIT = 60 // 60 sekund
const POINTS_PER_CORRECT = 20 // 20 bod≈Ø za spr√°vnou odpovƒõƒè
const MAX_TIME_BONUS = 50 // maxim√°ln√≠ time bonus

export function QuizGame({ onClose }: QuizGameProps) {
  const [currentStep, setCurrentStep] = useState<GameStep>('storytelling')
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([])
  const [timeRemaining, setTimeRemaining] = useState(TIME_LIMIT)
  const [quizStartTime, setQuizStartTime] = useState<number | null>(null)
  const [correctCount, setCorrectCount] = useState(0)
  const [earnedPoints, setEarnedPoints] = useState(0)
  const { addScore } = useScore()
  const { completeCurrentQuest, currentQuest } = useQuest()

  // ƒåasovaƒç
  useEffect(() => {
    if (currentStep !== 'quiz') return

    const timer = setInterval(() => {
      setTimeRemaining((prev) => {
        if (prev <= 1) {
          // ƒåas vypr≈°el - automaticky vyhodnotit
          handleQuizEnd()
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => clearInterval(timer)
  }, [currentStep])

  // Start kv√≠zu
  const handleStartQuiz = () => {
    setCurrentStep('quiz')
    setQuizStartTime(Date.now())
  }

  // V√Ωbƒõr odpovƒõdi
  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers]
    newAnswers[currentQuestionIndex] = answerIndex
    setSelectedAnswers(newAnswers)
  }

  // Dal≈°√≠ ot√°zka
  const handleNextQuestion = () => {
    if (currentQuestionIndex < QUIZ_QUESTIONS.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1)
    } else {
      // Posledn√≠ ot√°zka - vyhodnotit
      handleQuizEnd()
    }
  }

  // P≈ôedchoz√≠ ot√°zka
  const handlePrevQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1)
    }
  }

  // Ukonƒçen√≠ a vyhodnocen√≠ kv√≠zu
  const handleQuizEnd = () => {
    // Spoƒç√≠tat spr√°vn√© odpovƒõdi
    let correct = 0
    QUIZ_QUESTIONS.forEach((question, index) => {
      if (selectedAnswers[index] === question.correctAnswer) {
        correct++
      }
    })
    setCorrectCount(correct)

    // Spoƒç√≠tat body
    const basePoints = correct * POINTS_PER_CORRECT
    
    // Time bonus: ƒç√≠m v√≠c ƒçasu zb√Ωv√°, t√≠m vy≈°≈°√≠ bonus
    // 60s = 50 bod≈Ø, 0s = 0 bod≈Ø
    const timeBonus = Math.round((timeRemaining / TIME_LIMIT) * MAX_TIME_BONUS)
    
    const totalPoints = basePoints + timeBonus
    setEarnedPoints(totalPoints)
    addScore(totalPoints)

    // Dokonƒçit quest pouze pokud je to quest-4
    if (currentQuest?.id === 'quest-4') {
      completeCurrentQuest()
    }

    setCurrentStep('result')
  }

  // Form√°tov√°n√≠ ƒçasu
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const currentQuestion = QUIZ_QUESTIONS[currentQuestionIndex]
  const isAnswered = selectedAnswers[currentQuestionIndex] !== undefined
  const allAnswered = selectedAnswers.length === QUIZ_QUESTIONS.length && 
                      selectedAnswers.every(a => a !== undefined)

  return (
    <div className="quiz-game-overlay">
      <div className="quiz-game-modal">
        {/* STORYTELLING */}
        {currentStep === 'storytelling' && (
          <div className="quiz-storytelling">
            <h2>üéì Z√°vƒõreƒçn√Ω test</h2>
            <div className="quiz-story">
              <p>
                <strong>Dobr√° pr√°ce!</strong>
              </p>
              <p>
                Pro≈°el jsi z√°kladn√≠m onboardingem a teƒè je ƒças ovƒõ≈ôit, co ses nauƒçil.
              </p>
              <p>
                <strong>Odpovƒõz na 5 ot√°zek bƒõhem 60 sekund.</strong>
              </p>
              <p>
                Z√≠sk√°≈° body za spr√°vn√© odpovƒõdi a bonusov√© body za rychlost!
              </p>
            </div>
            <button onClick={handleStartQuiz} className="quiz-start-btn">
              Zaƒç√≠t test ‚Üí
            </button>
          </div>
        )}

        {/* QUIZ */}
        {currentStep === 'quiz' && (
          <div className="quiz-container">
            <div className="quiz-header">
              <div className="quiz-progress">
                Ot√°zka {currentQuestionIndex + 1} / {QUIZ_QUESTIONS.length}
              </div>
              <div className={`quiz-timer ${timeRemaining <= 10 ? 'timer-warning' : ''}`}>
                ‚è±Ô∏è {formatTime(timeRemaining)}
              </div>
            </div>

            <div className="quiz-question">
              <h3>{currentQuestion.question}</h3>
            </div>

            <div className="quiz-options">
              {currentQuestion.options.map((option, index) => (
                <button
                  key={index}
                  className={`quiz-option ${selectedAnswers[currentQuestionIndex] === index ? 'selected' : ''}`}
                  onClick={() => handleAnswerSelect(index)}
                >
                  <span className="option-letter">{String.fromCharCode(65 + index)}</span>
                  <span className="option-text">{option}</span>
                </button>
              ))}
            </div>

            <div className="quiz-navigation">
              <button 
                onClick={handlePrevQuestion} 
                disabled={currentQuestionIndex === 0}
                className="quiz-nav-btn"
              >
                ‚Üê P≈ôedchoz√≠
              </button>

              {currentQuestionIndex < QUIZ_QUESTIONS.length - 1 ? (
                <button 
                  onClick={handleNextQuestion}
                  disabled={!isAnswered}
                  className="quiz-nav-btn primary"
                >
                  Dal≈°√≠ ‚Üí
                </button>
              ) : (
                <button 
                  onClick={handleQuizEnd}
                  disabled={!allAnswered}
                  className="quiz-nav-btn primary finish"
                >
                  Dokonƒçit test ‚úì
                </button>
              )}
            </div>

            {/* Indik√°tor odpovƒõzen√Ωch ot√°zek */}
            <div className="quiz-dots">
              {QUIZ_QUESTIONS.map((_, index) => (
                <div
                  key={index}
                  className={`quiz-dot ${index === currentQuestionIndex ? 'active' : ''} ${selectedAnswers[index] !== undefined ? 'answered' : ''}`}
                  onClick={() => setCurrentQuestionIndex(index)}
                />
              ))}
            </div>
          </div>
        )}

        {/* RESULT */}
        {currentStep === 'result' && (
          <div className="quiz-result">
            <h2>üìä V√Ωsledky testu</h2>
            
            <div className="quiz-score-summary">
              <div className="quiz-final-score">
                <div className="score-label">Celkov√© sk√≥re</div>
                <div className="score-value">{earnedPoints} bod≈Ø</div>
              </div>
            </div>

            <div className="quiz-breakdown">
              <div className="breakdown-item">
                <span>Spr√°vn√© odpovƒõdi:</span>
                <strong>{correctCount} / {QUIZ_QUESTIONS.length}</strong>
              </div>
              <div className="breakdown-item">
                <span>Body za odpovƒõdi:</span>
                <strong>{correctCount * POINTS_PER_CORRECT} bod≈Ø</strong>
              </div>
              <div className="breakdown-item">
                <span>ƒåasov√Ω bonus:</span>
                <strong>{earnedPoints - (correctCount * POINTS_PER_CORRECT)} bod≈Ø</strong>
              </div>
              <div className="breakdown-item">
                <span>Zb√Ωvaj√≠c√≠ ƒças:</span>
                <strong>{formatTime(timeRemaining)}</strong>
              </div>
            </div>

            {/* P≈ôehled odpovƒõd√≠ */}
            <div className="quiz-review">
              <h3>P≈ôehled odpovƒõd√≠:</h3>
              {QUIZ_QUESTIONS.map((question, index) => {
                const isCorrect = selectedAnswers[index] === question.correctAnswer
                return (
                  <div key={index} className={`review-item ${isCorrect ? 'correct' : 'incorrect'}`}>
                    <div className="review-question">
                      {index + 1}. {question.question}
                    </div>
                    <div className="review-answer">
                      {isCorrect ? '‚úì' : '‚úó'} Tv√° odpovƒõƒè: {question.options[selectedAnswers[index]]}
                      {!isCorrect && (
                        <div className="correct-answer">
                          Spr√°vnƒõ: {question.options[question.correctAnswer]}
                        </div>
                      )}
                    </div>
                  </div>
                )
              })}
            </div>

            <div className="quiz-result-message">
              {correctCount === QUIZ_QUESTIONS.length && (
                <div className="perfect-score">
                  üéâ <strong>Perfektn√≠!</strong> Odpovƒõdƒõl jsi na v≈°echny ot√°zky spr√°vnƒõ!
                </div>
              )}
              {correctCount >= 4 && correctCount < QUIZ_QUESTIONS.length && (
                <div className="good-score">
                  üëè <strong>V√Ωbornƒõ!</strong> Zvl√°dl jsi test s velmi dobr√Ωm v√Ωsledkem!
                </div>
              )}
              {correctCount >= 3 && correctCount < 4 && (
                <div className="ok-score">
                  üëç <strong>Dob≈ôe!</strong> Z√°klady ovl√°d√°≈°, ale je co zlep≈°ovat.
                </div>
              )}
              {correctCount < 3 && (
                <div className="poor-score">
                  üí™ <strong>Zkus to znovu!</strong> Projdi si ≈°kolen√≠ je≈°tƒõ jednou.
                </div>
              )}
            </div>

            <button onClick={onClose} className="quiz-close-btn">
              Zav≈ô√≠t
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

