import { useState, useEffect } from 'react'
import { useScore } from '../contexts/ScoreContext'
import { useQuest } from '../contexts/QuestContext'
import './CourierDeliveryGame.css'

interface CourierDeliveryGameProps {
  onClose: () => void
}

type GameStep = 'storytelling' | 'pin-input' | 'parcel-input' | 'locker-open' | 'result'
type ErrorType = 'wrong-pin' | 'wrong-parcel' | null

const CORRECT_PIN = '1234' // P≈ôedgenerovan√Ω spr√°vn√Ω PIN
const POINTS_FOR_DELIVERY = 50 // Body za √∫spƒõ≈°n√© doruƒçen√≠

export function CourierDeliveryGame({ onClose }: CourierDeliveryGameProps) {
  const [currentStep, setCurrentStep] = useState<GameStep>('storytelling')
  const [pinInput, setPinInput] = useState('')
  const [parcelInput, setParcelInput] = useState('')
  const [correctParcelNumber, setCorrectParcelNumber] = useState('')
  const [openLockerNumber, setOpenLockerNumber] = useState<number | null>(null)
  const [errorType, setErrorType] = useState<ErrorType>(null)
  const [earnedPoints, setEarnedPoints] = useState(0)
  const { addScore } = useScore()
  const { completeCurrentQuest, currentQuest } = useQuest()

  // Vygeneruj n√°hodn√© 14m√≠stn√© ƒç√≠slo z√°silky
  useEffect(() => {
    const randomParcel = Array.from({ length: 14 }, () => 
      Math.floor(Math.random() * 10)
    ).join('')
    setCorrectParcelNumber(randomParcel)
  }, [])

  // Podpora fyzick√© kl√°vesnice
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Pouze pokud nejsme v chybov√©m stavu
      if (errorType) return

      // PIN input step
      if (currentStep === 'pin-input') {
        // ƒå√≠seln√© kl√°vesy 0-9
        if (e.key >= '0' && e.key <= '9') {
          if (pinInput.length < 4) {
            setPinInput(pinInput + e.key)
          }
          e.preventDefault()
        }
        // Backspace
        else if (e.key === 'Backspace') {
          setPinInput(pinInput.slice(0, -1))
          e.preventDefault()
        }
        // Enter - odeslat PIN
        else if (e.key === 'Enter' && pinInput.length === 4) {
          handlePinSubmit()
          e.preventDefault()
        }
      }
      
      // Parcel input step
      else if (currentStep === 'parcel-input') {
        // ƒå√≠seln√© kl√°vesy 0-9
        if (e.key >= '0' && e.key <= '9') {
          if (parcelInput.length < 14) {
            setParcelInput(parcelInput + e.key)
          }
          e.preventDefault()
        }
        // Backspace
        else if (e.key === 'Backspace') {
          setParcelInput(parcelInput.slice(0, -1))
          e.preventDefault()
        }
        // Enter - odeslat parcel number
        else if (e.key === 'Enter' && parcelInput.length === 14) {
          handleParcelSubmit()
          e.preventDefault()
        }
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [currentStep, pinInput, parcelInput, errorType])

  // P≈ô√≠bƒõh a √∫vod
  const handleStartGame = () => {
    setCurrentStep('pin-input')
  }

  // Virtu√°ln√≠ kl√°vesnice - stisknut√≠ ƒç√≠sla
  const handleNumberClick = (num: string) => {
    if (currentStep === 'pin-input' && pinInput.length < 4) {
      setPinInput(pinInput + num)
    } else if (currentStep === 'parcel-input' && parcelInput.length < 14) {
      setParcelInput(parcelInput + num)
    }
  }

  // Smaz√°n√≠ posledn√≠ho znaku
  const handleBackspace = () => {
    if (currentStep === 'pin-input') {
      setPinInput(pinInput.slice(0, -1))
    } else if (currentStep === 'parcel-input') {
      setParcelInput(parcelInput.slice(0, -1))
    }
  }

  // Potvrzen√≠ PIN
  const handlePinSubmit = () => {
    if (pinInput === CORRECT_PIN) {
      setErrorType(null)
      setCurrentStep('parcel-input')
    } else {
      setErrorType('wrong-pin')
    }
  }

  // Potvrzen√≠ parcel number
  const handleParcelSubmit = () => {
    if (parcelInput === correctParcelNumber) {
      setErrorType(null)
      // N√°hodnƒõ vyber schr√°nku (1-9)
      const randomLocker = Math.floor(Math.random() * 9) + 1
      setOpenLockerNumber(randomLocker)
      setCurrentStep('locker-open')
    } else {
      setErrorType('wrong-parcel')
    }
  }

  // Zav≈ôen√≠ schr√°nky
  const handleCloseLocker = () => {
    const points = POINTS_FOR_DELIVERY
    setEarnedPoints(points)
    addScore(points, true)
    
    // Dokonƒçit quest-2 po dokonƒçen√≠ minihry
    if (currentQuest?.id === 'quest-2') {
      completeCurrentQuest()
    }
    
    setCurrentStep('result')
  }

  // Retry po chybƒõ
  const handleRetry = () => {
    if (errorType === 'wrong-pin') {
      setPinInput('')
      setErrorType(null)
    } else if (errorType === 'wrong-parcel') {
      setParcelInput('')
      setErrorType(null)
    }
  }

  return (
    <div className="courier-delivery-overlay">
      <div className="courier-delivery-container">
        
        {/* STORYTELLING */}
        {currentStep === 'storytelling' && (
          <div className="story-section">
            <h2>üì¶ Doruƒçen√≠ z√°silky</h2>
            <div className="story-content">
              <p>
                V√≠tej u v√Ωdejn√≠ho boxu! Jako kur√Ωr m√°≈° za √∫kol doruƒçit z√°silku do spr√°vn√© schr√°nky.
              </p>
              <p>
                <strong>Tv≈Øj √∫kol:</strong>
              </p>
              <ol>
                <li>P≈ôihlas se pomoc√≠ sv√©ho 4m√≠stn√©ho kur√Ωrn√≠ho PINu</li>
                <li>Naskenuj ƒç√≠slo z√°silky (14 ƒç√≠slic)</li>
                <li>Syst√©m otev≈ôe spr√°vnou schr√°nku</li>
                <li>Vlo≈æ z√°silku a zav≈ôi schr√°nku</li>
              </ol>
              <div className="info-box">
                <strong>üí° Tip:</strong> PIN a ƒç√≠slo z√°silky najde≈° na t√©to obrazovce.
              </div>
            </div>
            <button onClick={handleStartGame} className="primary-button">
              Zaƒç√≠t √∫kol
            </button>
          </div>
        )}

        {/* PIN INPUT */}
        {currentStep === 'pin-input' && (
          <div className="input-section">
            <h2>üîê Zadej kur√Ωrn√≠ PIN</h2>
            
            {!errorType && (
              <div className="info-display">
                <p>Tv≈Øj kur√Ωrn√≠ PIN: <strong className="highlight">{CORRECT_PIN}</strong></p>
              </div>
            )}

            {errorType === 'wrong-pin' && (
              <div className="error-box">
                <h3>‚ùå Nespr√°vn√Ω PIN!</h3>
                <p>
                  <strong>Proƒç je d≈Øle≈æit√© zn√°t sv≈Øj kur√Ωrn√≠ PIN?</strong>
                </p>
                <p>
                  Kur√Ωrn√≠ PIN je tvoje jedineƒçn√° identifikace v syst√©mu. Bez spr√°vn√©ho PINu 
                  nem≈Ø≈æe≈° p≈ôistoupit k v√Ωdejn√≠mu boxu a doruƒçit z√°silky. Ka≈æd√Ω kur√Ωr m√° vlastn√≠ 
                  PIN pro bezpeƒçnost a sledovatelnost doruƒçen√≠.
                </p>
                <button onClick={handleRetry} className="retry-button">
                  Zkusit znovu
                </button>
              </div>
            )}

            {!errorType && (
              <>
                <div className="pin-display">
                  {Array.from({ length: 4 }).map((_, index) => (
                    <div key={index} className="pin-digit">
                      {pinInput[index] || '‚Ä¢'}
                    </div>
                  ))}
                </div>

                <div className="keyboard-hint">
                  üí° M≈Ø≈æe≈° pou≈æ√≠t kl√°vesnici: 0-9, Backspace, Enter
                </div>

                <div className="numpad">
                  {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (
                    <button 
                      key={num} 
                      onClick={() => handleNumberClick(num.toString())}
                      className="numpad-button"
                    >
                      {num}
                    </button>
                  ))}
                  <button onClick={handleBackspace} className="numpad-button backspace">
                    ‚Üê
                  </button>
                  <button onClick={() => handleNumberClick('0')} className="numpad-button">
                    0
                  </button>
                  <button 
                    onClick={handlePinSubmit} 
                    className="numpad-button submit"
                    disabled={pinInput.length !== 4}
                  >
                    ‚úì
                  </button>
                </div>
              </>
            )}
          </div>
        )}

        {/* PARCEL INPUT */}
        {currentStep === 'parcel-input' && (
          <div className="input-section">
            <h2>üì¶ Naskenuj ƒç√≠slo z√°silky</h2>
            
            {!errorType && (
              <div className="info-display">
                <p>ƒå√≠slo z√°silky: <strong className="highlight">{correctParcelNumber}</strong></p>
              </div>
            )}

            {errorType === 'wrong-parcel' && (
              <div className="error-box">
                <h3>‚ùå Nespr√°vn√© ƒç√≠slo z√°silky!</h3>
                <p>
                  <strong>Proƒç je d≈Øle≈æit√© nasklad≈àovat spr√°vnou z√°silku?</strong>
                </p>
                <p>
                  Ka≈æd√° z√°silka m√° unik√°tn√≠ ƒç√≠slo, kter√© odpov√≠d√° konkr√©tn√≠ schr√°nce. 
                  Pokud zad√°≈° ≈°patn√© ƒç√≠slo, syst√©m neotev≈ôe schr√°nku a z√°silka nem≈Ø≈æe 
                  b√Ωt doruƒçena. V≈ædy zkontroluj ƒç√≠slo z√°silky p≈ôed naskenov√°n√≠m!
                </p>
                <button onClick={handleRetry} className="retry-button">
                  Zkusit znovu
                </button>
              </div>
            )}

            {!errorType && (
              <>
                <div className="parcel-display">
                  {parcelInput || 'Zadej ƒç√≠slo z√°silky...'}
                  <span className="cursor-blink">|</span>
                </div>
                <div className="parcel-progress">
                  {parcelInput.length} / 14 ƒç√≠slic
                </div>

                <div className="keyboard-hint">
                  üí° M≈Ø≈æe≈° pou≈æ√≠t kl√°vesnici: 0-9, Backspace, Enter
                </div>

                <div className="numpad">
                  {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (
                    <button 
                      key={num} 
                      onClick={() => handleNumberClick(num.toString())}
                      className="numpad-button"
                    >
                      {num}
                    </button>
                  ))}
                  <button onClick={handleBackspace} className="numpad-button backspace">
                    ‚Üê
                  </button>
                  <button onClick={() => handleNumberClick('0')} className="numpad-button">
                    0
                  </button>
                  <button 
                    onClick={handleParcelSubmit} 
                    className="numpad-button submit"
                    disabled={parcelInput.length !== 14}
                  >
                    ‚úì
                  </button>
                </div>
              </>
            )}
          </div>
        )}

        {/* LOCKER OPEN */}
        {currentStep === 'locker-open' && (
          <div className="locker-section">
            <h2>‚úÖ Schr√°nka otev≈ôena!</h2>
            <p className="success-message">
              Schr√°nka ƒç√≠slo <strong>{openLockerNumber}</strong> je nyn√≠ otev≈ôen√°.
            </p>

            <div className="locker-grid">
              {Array.from({ length: 9 }).map((_, index) => {
                const lockerNum = index + 1
                const isOpen = lockerNum === openLockerNumber
                
                return (
                  <div 
                    key={lockerNum} 
                    className={`locker-box ${isOpen ? 'open' : ''}`}
                  >
                    <div className="locker-number">{lockerNum}</div>
                    {isOpen && (
                      <div className="locker-status">
                        <span className="open-indicator">üîì OTEV≈òENO</span>
                      </div>
                    )}
                  </div>
                )
              })}
            </div>

            <div className="action-prompt">
              <p>üì¶ Vlo≈æ z√°silku do schr√°nky a zav≈ôi dv√≠≈ôka.</p>
              <button onClick={handleCloseLocker} className="primary-button">
                Zav≈ô√≠t schr√°nku
              </button>
            </div>
          </div>
        )}

        {/* RESULT */}
        {currentStep === 'result' && (
          <div className="result-section">
            <h2>üéâ √ökol splnƒõn!</h2>
            <div className="result-content">
              <p className="success-text">
                Skvƒõl√° pr√°ce! √öspƒõ≈°nƒõ jsi doruƒçil z√°silku do v√Ωdejn√≠ho boxu.
              </p>
              <div className="points-earned">
                <div className="points-label">Z√≠skan√© body:</div>
                <div className="points-value">+{earnedPoints}</div>
              </div>
              
              <div className="summary-box">
                <h3>üìã Shrnut√≠:</h3>
                <ul>
                  <li>‚úì P≈ôihl√°≈°en√≠ kur√Ωra (PIN)</li>
                  <li>‚úì Skenov√°n√≠ z√°silky</li>
                  <li>‚úì Otev≈ôen√≠ schr√°nky ƒç. {openLockerNumber}</li>
                  <li>‚úì Zav≈ôen√≠ schr√°nky</li>
                </ul>
              </div>
            </div>
            <button onClick={onClose} className="primary-button">
              Dokonƒçit
            </button>
          </div>
        )}

        {/* Zav√≠rac√≠ tlaƒç√≠tko */}
        {currentStep !== 'result' && (
          <button onClick={onClose} className="close-button">
            ‚úï
          </button>
        )}
      </div>
    </div>
  )
}

